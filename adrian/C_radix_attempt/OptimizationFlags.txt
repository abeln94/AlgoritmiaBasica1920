=> COMPILING
~> SUMMARY: use -Ofast -mcpu=ultrasparc -mtune=ultrasparc -funroll-loops

HELPFUL AND RELIABLE
man7.org/linux/man-pages/man1/g++.1.html, CTRL+F "Options That Control Optimization", CTRL+F "SPARC Options"
https://gcc.gnu.org/onlinedocs/gcc-4.8.2/gcc/SPARC-Options.html -> man part of the previous link (summarizes "SPARC Options")
https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html -> man part of the previous link (summarizes "Options That Control Optimization")
https://www.linuxtopia.org/online_books/an_introduction_to_gcc/gccintro_49.html
https://stackoverflow.com/questions/10646894/gcc-options-for-optimization-on-given-cpu-architecture
https://lemire.me/blog/2018/07/25/it-is-more-complicated-than-i-thought-mtune-march-in-gcc/
https://wiki.gentoo.org/wiki/GCC_optimization -> deals with both compiling and linking; "-mcpu=ultrasparc -mtune=ultrasparc" are only needed in Intel; AND HENDRIX, because it makes the case OS/HW/GCC VERSION doesn't recognizes the -march flag, and CPU type must be indicated manually

=> LINKING 
~> SUMMARY: use -flto

HELPFUL AND RELIABLE
https://gcc.gnu.org/wiki/LinkTimeOptimization
http://johanengelen.github.io/ldc/2016/11/10/Link-Time-Optimization-LDC.html
https://wiki.debian.org/LTO
https://www.cryptopp.com/wiki/Link_Time_Optimization

HELPFUL AND RELIABLE (LESS IMPORTANT THAN THE PREVIOUS ONES)
https://linux.die.net/man/1/ld, CTRL+F "optim"
https://developers.redhat.com/blog/2018/03/21/compiler-and-linker-flags-gcc/

GENERAL
https://caiorss.github.io/C-Cpp-Notes/compiler-flags-options.html

CURIOUS
https://queue.acm.org/detail.cfm?id=3372264

WARN
https://stackoverflow.com/questions/23736507/is-there-a-reason-why-not-to-use-link-time-optimization-lto